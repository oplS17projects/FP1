;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname shapes) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
(define-struct circle (center raduis))

(define-struct square (upper-left length))

(define-struct rect (upper-left width length))

;;Takes in a ethier a circle, square, or rectangle and returns the area of that shape
;;reutrns -1 if a shape was not passed or the shape had invlid values
(check-expect (area -1) -1)
(check-expect (area "foo") -1)
(check-expect (area true) -1)
(check-expect (area (make-circle "foo" 1)) -1)
(check-expect (area (make-circle (make-posn 1 1) +inf.0)) -1)
(check-expect (area (make-circle (make-posn 1 1) -1)) -1)
(check-expect (area (make-circle (make-posn true 1) 1)) -1)
(check-expect (area (make-circle (make-posn 1 +inf.0) 1)) -1)
(check-expect (area (make-square true 1)) -1)
(check-expect (area (make-square (make-posn 1 1) +inf.0)) -1)
(check-expect (area (make-square (make-posn 1 1) 0)) -1)
(check-expect (area (make-square (make-posn true 1) 1)) -1)
(check-expect (area (make-square (make-posn 1 +inf.0) 1)) -1)
(check-expect (area (make-rect true 1 1)) -1)
(check-expect (area (make-rect (make-posn 1 1) +inf.0 1)) -1)
(check-expect (area (make-rect (make-posn 1 1) -1 1)) -1)
(check-expect (area (make-rect (make-posn "foo" 1) 1 1)) -1)
(check-expect (area (make-rect (make-posn 1 +inf.0) -1 1)) -1)
(check-within (area (make-circle (make-posn 0 0) 1)) 3.14 .01)
(check-within (area (make-circle (make-posn 0 0) 5.5)) 95.03 .01)
(check-within (area (make-circle (make-posn 0 0) 10)) 314.16 .01)
(check-expect (area (make-square (make-posn 0 0) 1)) 1)
(check-expect (area (make-square (make-posn 0 0) 3)) 9)
(check-within (area (make-square (make-posn 0 0) 20.1)) 404.01 .01)
(check-expect (area (make-rect (make-posn 0 0) 1 1)) 1)
(check-expect (area (make-rect (make-posn 0 0) 3 11)) 33)
(check-expect (area (make-rect (make-posn 0 0) 20.1 10)) 201)
              
(define (area shape)
  (if (circle? shape)
      (if (and (posn? (circle-center shape)) (rational? (circle-raduis shape)))
           (if (and (> (circle-raduis shape) 0) (rational? (posn-x (circle-center shape))) (rational? (posn-y (circle-center shape)))) 
              (* pi (* (circle-raduis shape) (circle-raduis shape))) -1)-1)      
  (if (square? shape)
      (if (and (posn? (square-upper-left shape)) (rational? (square-length shape)))
           (if (and (> (square-length shape) 0) (rational? (posn-x (square-upper-left shape))) (rational? (posn-y (square-upper-left shape))))
              (* (square-length shape) (square-length shape)) -1)-1)  
  (if (rect? shape)
      (if (and (posn? (rect-upper-left shape)) (rational? (rect-length shape)) (rational? (rect-width shape)))
           (if (and (> (rect-length shape) 0) (> (rect-width shape) 0) (rational? (posn-x (rect-upper-left shape))) (rational? (posn-y (rect-upper-left shape))))
              (* (rect-width shape) (rect-length shape)) -1)-1)-1))))

;;returns Produces a shape whose key position is moved by delta pixels in the x direction
;;returns -1 if any invalid parameter was passed to the function

(check-expect (translate-shape -1 1) -1)
(check-expect (translate-shape "foo" 1) -1)
(check-expect (translate-shape true 1) -1)
(check-expect (translate-shape (make-circle "foo" 1) 1) -1)
(check-expect (translate-shape (make-circle (make-posn 1 1) +inf.0) 1) -1)
(check-expect (translate-shape (make-circle (make-posn 1 1) -1) 1) -1)
(check-expect (translate-shape (make-circle (make-posn true 1) 1) 1) -1)
(check-expect (translate-shape (make-circle (make-posn 1 +inf.0) 1) 1) -1)
(check-expect (translate-shape (make-square true 1) 1) -1)
(check-expect (translate-shape (make-square (make-posn 1 1) +inf.0) 1) -1)
(check-expect (translate-shape (make-square (make-posn 1 1) 0) 1) -1)
(check-expect (translate-shape (make-square (make-posn true 1) 1) 1) -1)
(check-expect (translate-shape (make-square (make-posn 1 +inf.0) 1) 1) -1)
(check-expect (translate-shape (make-rect true 1 1) 1) -1)
(check-expect (translate-shape (make-rect (make-posn 1 1) +inf.0 1) 1) -1)
(check-expect (translate-shape (make-rect (make-posn 1 1) -1 1) 1) -1)
(check-expect (translate-shape (make-rect (make-posn "foo" 1) 1 1) 1) -1)
(check-expect (translate-shape (make-rect (make-posn 1 +inf.0) -1 1) 1) -1)
(check-expect (translate-shape (make-rect (make-posn 1 1) 1 1) "foo") -1)
(check-expect (translate-shape (make-rect (make-posn 1 1) 1 1) true) -1)
(check-expect (translate-shape (make-rect (make-posn 1 1) 1 1) +inf.0) -1)
(check-expect (translate-shape (make-circle (make-posn 1 1) 1) 1) (make-circle (make-posn 2 1) 1))
(check-expect (translate-shape (make-circle (make-posn 1 1) 1)-2) (make-circle (make-posn -1 1) 1))
(check-expect (translate-shape (make-circle (make-posn 1 1) 1) 100) (make-circle (make-posn 101 1) 1))
(check-expect (translate-shape (make-square (make-posn 1 1) 1) 1) (make-square (make-posn 2 1) 1))
(check-expect (translate-shape (make-square (make-posn 1 1) 1)-5) (make-square (make-posn -4 1) 1))
(check-expect (translate-shape (make-square (make-posn 1 1) 1) 99.9) (make-square (make-posn 100.9 1) 1))
(check-expect (translate-shape (make-rect (make-posn 0 0) 1 1) 1) (make-rect (make-posn 1 0) 1 1))
(check-expect (translate-shape (make-rect (make-posn -5 1) 1 1)-5) (make-rect (make-posn -10 1) 1 1))
(check-expect (translate-shape (make-rect (make-posn -10 1) 1 1) -0.1) (make-rect (make-posn -10.1 1) 1 1))



(define (translate-shape shape delta)
  (if (rational? delta)
      (if (circle? shape)
          (if (and (posn? (circle-center shape)) (rational? (circle-raduis shape)))
              (if (and (> (circle-raduis shape) 0) (rational? (posn-x (circle-center shape))) (rational? (posn-y (circle-center shape)))) 
                  (make-circle (make-posn (+ (posn-x (circle-center shape)) delta) (posn-y (circle-center shape))) (circle-raduis shape)) -1)-1)      
      (if (square? shape)
          (if (and (posn? (square-upper-left shape)) (rational? (square-length shape)))
              (if (and (> (square-length shape) 0) (rational? (posn-x (square-upper-left shape))) (rational? (posn-y (square-upper-left shape))))
                  (make-square (make-posn (+ (posn-x (square-upper-left shape)) delta) (posn-y (square-upper-left shape))) (square-length shape)) -1)-1)  
      (if (rect? shape)
          (if (and (posn? (rect-upper-left shape)) (rational? (rect-length shape)) (rational? (rect-width shape)))
              (if (and (> (rect-length shape) 0) (> (rect-width shape) 0) (rational? (posn-x (rect-upper-left shape))) (rational? (posn-y (rect-upper-left shape))))
                  (make-rect (make-posn (+ (posn-x (rect-upper-left shape)) delta) (posn-y (rect-upper-left shape))) (rect-length shape) (rect-width shape)) -1)-1)-1)))-1))

;;Check to see if the point p is in the shape passed shape can be a circle, rectangle, or square
;;Returns true if p is within the shape, false otherwise.
;;-1 is return is there is any invalid input

(check-expect (in-shape -1 (make-posn 1 1)) -1)
(check-expect (in-shape "foo" (make-posn 1 1)) -1)
(check-expect (in-shape true (make-posn 1 1)) -1)
(check-expect (in-shape (make-circle "foo" 1) (make-posn 1 1)) -1)
(check-expect (in-shape (make-circle (make-posn 1 1) +inf.0) (make-posn 1 1)) -1)
(check-expect (in-shape (make-circle (make-posn 1 1) -1) (make-posn 1 1)) -1)
(check-expect (in-shape (make-circle (make-posn true 1) 1) (make-posn 1 1)) -1)
(check-expect (in-shape (make-circle (make-posn 1 +inf.0) 1) (make-posn 1 1)) -1)
(check-expect (in-shape (make-square true 1) (make-posn 1 1)) -1)
(check-expect (in-shape (make-square (make-posn 1 1) +inf.0) (make-posn 1 1)) -1)
(check-expect (in-shape (make-square (make-posn 1 1) 0) (make-posn 1 1)) -1)
(check-expect (in-shape (make-square (make-posn true 1) 1) (make-posn 1 1)) -1)
(check-expect (in-shape (make-square (make-posn 1 +inf.0) 1) (make-posn 1 1)) -1)
(check-expect (in-shape (make-rect true 1 1) (make-posn 1 1)) -1)
(check-expect (in-shape (make-rect (make-posn 1 1) +inf.0 1) (make-posn 1 1)) -1)
(check-expect (in-shape (make-rect (make-posn 1 1) -1 1) (make-posn 1 1)) -1)
(check-expect (in-shape (make-rect (make-posn "foo" 1) 1 1) (make-posn 1 1)) -1)
(check-expect (in-shape (make-rect (make-posn 1 +inf.0) 1 1) (make-posn 1 1)) -1)
(check-expect (in-shape (make-rect (make-posn 1 1) 1 -1) (make-posn 1 1)) -1)
(check-expect (in-shape (make-rect (make-posn 1 1) 1 1) "foo") -1)
(check-expect (in-shape (make-rect (make-posn 1 1) 1 1) true) -1)
(check-expect (in-shape (make-rect (make-posn 1 1) 1 1) +inf.0) -1)
(check-expect (in-shape (make-circle (make-posn 1 1)  1) (make-posn true 1)) -1)
(check-expect (in-shape (make-circle (make-posn 1 1)  1) (make-posn 1 +inf.0)) -1)
(check-expect (in-shape (make-circle (make-posn 0 0)  3) (make-posn 0 3)) true)
(check-expect (in-shape (make-circle (make-posn 0 0)  3) (make-posn 3 0)) true)
(check-expect (in-shape (make-circle (make-posn 0 0)  3) (make-posn 0 -3)) true)
(check-expect (in-shape (make-circle (make-posn 0 0)  3) (make-posn -3 0)) true)
(check-expect (in-shape (make-circle (make-posn 0 0)  3) (make-posn 2.5 1)) true)
(check-expect (in-shape (make-circle (make-posn 0 0)  1) (make-posn 0 0)) true)
(check-expect (in-shape (make-circle (make-posn 0 0)  3) (make-posn 2.5 2.5)) false)
(check-expect (in-shape (make-square (make-posn 0 0) 10) (make-posn -2 2.3)) false)
(check-expect (in-shape (make-square (make-posn 0 0) 10) (make-posn -2 -2.3)) false)
(check-expect (in-shape (make-square (make-posn 0 0) 10) (make-posn 0 100)) false)
(check-expect (in-shape (make-square (make-posn 0 0) 10) (make-posn 0 -10)) true)
(check-expect (in-shape (make-square (make-posn 0 0) 10) (make-posn 10 -10)) true)
(check-expect (in-shape (make-square (make-posn 0 0) 10) (make-posn 10 0)) true)
(check-expect (in-shape (make-square (make-posn 0 0) 10) (make-posn 5 -5)) true)
(check-expect (in-shape (make-square (make-posn 0 0) 10) (make-posn -1 0)) false)
(check-expect (in-shape (make-square (make-posn 0 0) 10) (make-posn -1 -10)) false)
(check-expect (in-shape (make-square (make-posn 0 0) 10) (make-posn 10 -11)) false)
(check-expect (in-shape (make-square (make-posn 0 0) 10) (make-posn 10 1)) false)
(check-expect (in-shape (make-rect (make-posn 0 0) 10 5) (make-posn 0 0)) true)
(check-expect (in-shape (make-rect (make-posn 0 0) 10 5) (make-posn 0 -5)) true)
(check-expect (in-shape (make-rect (make-posn 0 0) 10 5) (make-posn 10 -5)) true)
(check-expect (in-shape (make-rect (make-posn 0 0) 10 5) (make-posn 10 0)) true)
(check-expect (in-shape (make-rect (make-posn 0 0) 10 5) (make-posn 5 -2.5)) true)
(check-expect (in-shape (make-rect (make-posn 0 0) 10 5) (make-posn -1 0)) false)
(check-expect (in-shape (make-rect (make-posn 0 0) 10 5) (make-posn -1 -5)) false)
(check-expect (in-shape (make-rect (make-posn 0 0) 10 5) (make-posn 10 -6)) false)
(check-expect (in-shape (make-rect (make-posn 0 0) 10 5) (make-posn 10 1)) false)



(define (in-shape shape p)
  (if (and (posn? p) (rational?(posn-x p)) (rational?(posn-y p)))
      (if (circle? shape)
          (if (and (posn? (circle-center shape)) (rational? (circle-raduis shape)))
              (if (and (> (circle-raduis shape) 0) (rational? (posn-x (circle-center shape))) (rational? (posn-y (circle-center shape)))) 
                  (if  (<= (sqrt (+ (* (abs(- (posn-y (circle-center shape)) (posn-y p))) (abs(- (posn-y (circle-center shape)) (posn-y p))))
                          (* (abs(- (posn-x (circle-center shape)) (posn-x p))) (abs(- (posn-x (circle-center shape)) (posn-x p)))))) (circle-raduis shape)) true false) -1)-1)      
      (if (square? shape)
          (if (and (posn? (square-upper-left shape)) (rational? (square-length shape)))
              (if (and (> (square-length shape) 0) (rational? (posn-x (square-upper-left shape))) (rational? (posn-y (square-upper-left shape))))
                  (if (and
                      (and(>= (posn-y p) (- (posn-y (square-upper-left shape)) (square-length shape))) (<= (posn-y p) (posn-y (square-upper-left shape))))
                      (and(<= (posn-x p) (+ (posn-x (square-upper-left shape)) (square-length shape))) (>= (posn-x p) (posn-y (square-upper-left shape))))) true false) -1)-1)  
      (if (rect? shape)
          (if (and (posn? (rect-upper-left shape)) (rational? (rect-length shape)) (rational? (rect-width shape)))
              (if (and (> (rect-length shape) 0) (> (rect-width shape) 0) (rational? (posn-x (rect-upper-left shape))) (rational? (posn-y (rect-upper-left shape))))
                  (if (and
                      (and(>= (posn-y p) (- (posn-y (rect-upper-left shape)) (rect-length shape))) (<= (posn-y p) (posn-y (rect-upper-left shape))))
                      (and(<= (posn-x p) (+ (posn-x (rect-upper-left shape)) (rect-width shape))) (>= (posn-x p) (posn-y (rect-upper-left shape))))) true false) -1)-1)-1)))-1))
